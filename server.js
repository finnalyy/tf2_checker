const express = require('express');
const fs = require('fs');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;
const JSON_PATH = path.join(__dirname, 'known_ids.json');

app.use(cors());
app.use(bodyParser.json());

if (!fs.existsSync(JSON_PATH)) {
  fs.writeFileSync(JSON_PATH, '{}');
}

app.get('/known_ids.json', (req, res) => {
  fs.readFile(JSON_PATH, 'utf8', (err, data) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞' });
    res.setHeader('Content-Type', 'application/json');
    res.send(data);
  });
});

app.post('/update', (req, res) => {
  const newUsers = req.body;
  if (typeof newUsers !== 'object') return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });

  fs.readFile(JSON_PATH, 'utf8', (err, data) => {
    let existingData = {};
    if (!err && data) {
      try {
        existingData = JSON.parse(data);
      } catch (e) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ JSON' });
      }
    }

    const updated = { ...existingData, ...newUsers };

    fs.writeFile(JSON_PATH, JSON.stringify(updated, null, 2), (err) => {
      if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª' });
      res.json({ success: true, message: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' });
    });
  });
});

app.listen(PORT, () => {
  const isRailway = !!process.env.RAILWAY_ENVIRONMENT;
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  if (isRailway) {
    console.log(`üåç Railway URL –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫: https://tf2-checker.up.railway.app`);
  } else {
    console.log(`üß™ –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`);
  }
});
